package GUI;

import Category.Category;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

public class CategoryView extends JFrame {
    private JTextField categoryName;
    private JPanel contentPane;
    private JComboBox<Color> colorBox;
    private JButton cancelButton;
    private JButton confirmButton;
    private JButton deleteButton;
    private CategoriesView parent;

    public CategoryView(CategoriesView categoriesView) {
        contentPane.remove(deleteButton);
        this.parent = categoriesView;
        setContentPane(contentPane);
        setTitle("Add Category");
        setSize(400, 400);
        colorBox.setRenderer(new ColoringCellRenderer());
        setVisible(true);

        colorBox.addItem(Color.GRAY);
        colorBox.addItem(Color.CYAN);
        colorBox.addItem(Color.PINK);
        colorBox.addItem(Color.GREEN);
        colorBox.addItem(Color.YELLOW);

        cancelButton.addActionListener(e -> {
            dispose();
        });
        confirmButton.addActionListener(e -> {
            parent.parent.taskManager.getCategoryService().addCategory(new Category(categoryName.getText(), (Color) colorBox.getSelectedItem()));
            parent.updateCategoriesList();
            dispose();
        });
    }


    public CategoryView(CategoriesView categoriesView, Category selectedCategory) {
        this.parent = categoriesView;
        setContentPane(contentPane);
        setTitle("Add Category");
        setSize(400, 400);
        colorBox.setRenderer(new ColoringCellRenderer());
        setVisible(true);

        colorBox.addItem(Color.GRAY);
        colorBox.addItem(Color.CYAN);
        colorBox.addItem(Color.PINK);
        colorBox.addItem(Color.GREEN);
        colorBox.addItem(Color.YELLOW);
        colorBox.setSelectedItem(selectedCategory.getColor());
        categoryName.setText(selectedCategory.getName());
        cancelButton.addActionListener(e -> {
            dispose();
        });
        confirmButton.addActionListener(e -> {
            selectedCategory.setName(categoryName.getText());
            selectedCategory.setColor( (Color) colorBox.getSelectedItem());
            parent.parent.taskManager.getCategoryService().updateCategory(selectedCategory);
            parent.updateCategoriesList();
            dispose();
        });
        deleteButton.addActionListener(e -> {
            if (!parent.parent.taskManager.isCategoryInUse(selectedCategory)) {
                parent.parent.taskManager.getCategoryService().deleteCategory(selectedCategory);
                parent.updateCategoriesList();
                dispose();
            } else {
                String message = "this category is currently in use within a task and cannot be deleted";
                JOptionPane.showMessageDialog(this, message,"Error",JOptionPane.ERROR_MESSAGE);
            }

        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Name");
        contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Color");
        contentPane.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        categoryName = new JTextField();
        contentPane.add(categoryName, new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        colorBox = new JComboBox();
        contentPane.add(colorBox, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        confirmButton = new JButton();
        confirmButton.setText("confirm");
        contentPane.add(confirmButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("cancel");
        contentPane.add(cancelButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("delete");
        contentPane.add(deleteButton, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private static class ColoringCellRenderer extends DefaultListCellRenderer {
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            c.setBackground(((Color) value));
            return c;
        }
    }

}
