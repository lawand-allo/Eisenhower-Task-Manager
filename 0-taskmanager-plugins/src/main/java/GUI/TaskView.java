package GUI;

import Task.Status;
import Category.Category;
import Person.Person;
import Task.Task;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class TaskView extends JFrame {
    private final JPanel contentPane = new JPanel();
    private JTextField nameField;
    private JTextField noteField;
    private JComboBox<Category> categoryField;
    private JTextField dueDateField;
    private JComboBox<Person> personField;
    private JComboBox<Status> statusField;
    private JRadioButton importantRadioButton;
    private JRadioButton notImportantRadioButton;
    private JRadioButton urgentRadioButton;
    private JRadioButton notUrgentRadioButton;
    private JButton confirmButton;
    private JButton cancelButton;
    private JButton deleteTaskButton;
    private JPanel deleteButtonPane;
    public ActionListener confirmButtonActionListener;
    private final RegularTaskManagerView parent;
    private Task selectedTask;

    public TaskView(RegularTaskManagerView parent) {
        $$$setupUI$$$();
        setTitle("Add Task");
        setUpClickListenerForAddTask();
        contentPane.remove(deleteButtonPane);
        setContentPane(contentPane);
        this.parent = parent;
        for (Category category : parent.taskManager.getCategoryService().getAllCategories()) {
            categoryField.addItem(category);
        }
        for (Person person : parent.taskManager.getPersonService().getAllPersons()) {
            personField.addItem(person);
        }
        statusField.setEnabled(false);
        statusField.addItem(Status.OPEN);

        ButtonGroup importanceButtonsGroup = new ButtonGroup();
        importanceButtonsGroup.add(importantRadioButton);
        importanceButtonsGroup.add(notImportantRadioButton);

        ButtonGroup urgencyButtonsGroup = new ButtonGroup();
        urgencyButtonsGroup.add(urgentRadioButton);
        urgencyButtonsGroup.add(notUrgentRadioButton);

        setSize(400, 400);
        setVisible(true);
    }

    public TaskView(RegularTaskManagerView parent, Task selectedTask) {
        this.selectedTask = selectedTask;
        this.parent = parent;
        $$$setupUI$$$();
        setTitle("Edit Task");
        setContentPane(contentPane);
        for (Category category : parent.taskManager.getCategoryService().getAllCategories()) {
            categoryField.addItem(category);
        }
        for (Person person : parent.taskManager.getPersonService().getAllPersons()) {
            personField.addItem(person);
        }
        statusField.addItem(Status.OPEN);
        statusField.addItem(Status.INPROGRESS);
        statusField.addItem(Status.DONE);
        nameField.setText(selectedTask.getName());
        noteField.setText(selectedTask.getNote());
        categoryField.setSelectedItem(selectedTask.getCategory());
        personField.setSelectedItem(selectedTask.getResponsiblePerson());
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String strDate = dateFormat.format(selectedTask.getDueDate());
        dueDateField.setText(strDate);

        statusField.setSelectedItem(selectedTask.getStatus());
        ButtonGroup importanceButtonsGroup = new ButtonGroup();
        importanceButtonsGroup.add(importantRadioButton);
        importanceButtonsGroup.add(notImportantRadioButton);

        ButtonGroup urgencyButtonsGroup = new ButtonGroup();
        urgencyButtonsGroup.add(urgentRadioButton);
        urgencyButtonsGroup.add(notUrgentRadioButton);
        if (selectedTask.isUrgent()) {
            urgentRadioButton.setSelected(true);
        } else {
            notUrgentRadioButton.setSelected(true);
        }
        if (selectedTask.isImportant()) {
            importantRadioButton.setSelected(true);
        } else {
            notImportantRadioButton.setSelected(true);
        }
        setUpClickListenerForEditTask();
        setSize(400, 400);
        setVisible(true);
    }

    private void setUpClickListenerForEditTask() {
        confirmButtonActionListener = e -> {
            updateTask();
            parent.updateTaskList();
            dispose();
        };

        confirmButton.addActionListener(confirmButtonActionListener);

        cancelButton.addActionListener(e -> dispose());

        deleteTaskButton.addActionListener(e -> {
            deleteTask();
            parent.updateTaskList();
            dispose();
        });
    }


    public void createUIComponents() {
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane.setLayout(new GridLayoutManager(10, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Name");
        contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Note");
        contentPane.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameField = new JTextField();
        contentPane.add(nameField, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        noteField = new JTextField();
        contentPane.add(noteField, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Category");
        contentPane.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        categoryField = new JComboBox();
        contentPane.add(categoryField, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Due Date");
        contentPane.add(label4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Responsible Peson");
        contentPane.add(label5, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Status");
        contentPane.add(label6, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Importance");
        contentPane.add(label7, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Urgency");
        contentPane.add(label8, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dueDateField = new JTextField();
        contentPane.add(dueDateField, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        personField = new JComboBox();
        contentPane.add(personField, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusField = new JComboBox();
        contentPane.add(statusField, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        importantRadioButton = new JRadioButton();
        importantRadioButton.setText("important");
        contentPane.add(importantRadioButton, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        notImportantRadioButton = new JRadioButton();
        notImportantRadioButton.setText("not important");
        contentPane.add(notImportantRadioButton, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        urgentRadioButton = new JRadioButton();
        urgentRadioButton.setText("urgent");
        contentPane.add(urgentRadioButton, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        notUrgentRadioButton = new JRadioButton();
        notUrgentRadioButton.setText("notUrgent");
        contentPane.add(notUrgentRadioButton, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        confirmButton = new JButton();
        confirmButton.setText("confirm");
        contentPane.add(confirmButton, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("cancel");
        contentPane.add(cancelButton, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButtonPane = new JPanel();
        deleteButtonPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(deleteButtonPane, new GridConstraints(9, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deleteTaskButton = new JButton();
        deleteTaskButton.setText("delete Task");
        deleteButtonPane.add(deleteTaskButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void addTask() {
        Date dueDate = null;
        try {
            dueDate = new SimpleDateFormat("dd/MM/yyyy").parse(dueDateField.getText());
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Task task = new Task(nameField.getText(), noteField.getText(), (Category) categoryField.getSelectedItem(), dueDate, (Person) personField.getSelectedItem(), importantRadioButton.isSelected(), urgentRadioButton.isSelected());
        parent.taskManager.getTaskService().addTask(task);
    }

    private void updateTask() {
        Date dueDate = null;
        try {
            dueDate = new SimpleDateFormat("dd/MM/yyyy").parse(dueDateField.getText());
        } catch (ParseException e) {
            e.printStackTrace();
        }

        selectedTask.setName(nameField.getText());
        selectedTask.setNote(noteField.getText());
        selectedTask.setCategory((Category) categoryField.getSelectedItem());
        selectedTask.setDueDate(dueDate);
        selectedTask.setResponsiblePerson((Person) personField.getSelectedItem());
        selectedTask.setImportant(importantRadioButton.isSelected());
        selectedTask.setUrgent(urgentRadioButton.isSelected());
        selectedTask.setStatus((Status) statusField.getSelectedItem());

        parent.taskManager.getTaskService().updateTask(selectedTask);
    }

    private void deleteTask() {
        parent.taskManager.getTaskService().deleteTask(selectedTask);
    }

    private void setUpClickListenerForAddTask() {
        confirmButtonActionListener = e -> {
            addTask();
            parent.updateTaskList();
            dispose();
        };
        confirmButton.addActionListener(confirmButtonActionListener);

        cancelButton.addActionListener(e -> dispose());
    }

}
